"""
Koyeb Î∞∞Ìè¨Ïö© Ïõπ ÏÑúÎ≤Ñ Ïï±
"""

import os
import sys
from pathlib import Path
from flask import Flask, render_template, jsonify, request, send_file, make_response
from flask_cors import CORS
from datetime import datetime, timedelta
import pytz
import json
import logging
from dotenv import load_dotenv
import psycopg2
from psycopg2.extras import RealDictCursor

# ÌîÑÎ°úÏ†ùÌä∏ Í≤ΩÎ°ú Ï∂îÍ∞Ä
sys.path.append(str(Path(__file__).parent))

# ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎìú
load_dotenv()

# PostgreSQL Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ import
from src.utils.postgresql_database import PostgreSQLDatabase

# AI ÏΩòÌÖêÏ∏† ÏÉùÏÑ± import (ÎÇòÏ§ëÏóê Ï¥àÍ∏∞Ìôî)

# Flask Ïï± ÏÉùÏÑ±
app = Flask(__name__, 
            template_folder='templates',
            static_folder='static',
            static_url_path='/static')  # Ï†ïÏ†Å ÌååÏùº Í≤ΩÎ°ú Î™ÖÏãú
CORS(app)

# ÌÖúÌîåÎ¶ø Ï∫êÏã± ÎπÑÌôúÏÑ±Ìôî
app.config['TEMPLATES_AUTO_RELOAD'] = True
app.jinja_env.auto_reload = True

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# AI ÏΩòÌÖêÏ∏† ÏÉùÏÑ±Í∏∞ Ï¥àÍ∏∞Ìôî
try:
    from src.generators.content_generator import ContentGenerator
    content_generator = ContentGenerator()
    logger.info("‚úÖ Claude API ÏΩòÌÖêÏ∏† ÏÉùÏÑ±Í∏∞ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Claude API Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {e}")
    content_generator = None

# ÌïúÍµ≠ ÏãúÍ∞ÑÎåÄ ÏÑ§Ï†ï
KST = pytz.timezone('Asia/Seoul')

# PostgreSQL Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïù∏Ïä§ÌÑ¥Ïä§ (Ï†ÑÏó≠)
db = None

def get_database():
    """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïù∏Ïä§ÌÑ¥Ïä§ Î∞òÌôò"""
    global db
    if db is None:
        db = PostgreSQLDatabase()
    return db

# PostgreSQL Ïó∞Í≤∞ Ìï®Ïàò
def get_db_connection():
    """PostgreSQL Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞"""
    try:
        conn = psycopg2.connect(
            host=os.getenv('PG_HOST'),
            port=os.getenv('PG_PORT', 5432),
            database=os.getenv('PG_DATABASE'),
            user=os.getenv('PG_USER'),
            password=os.getenv('PG_PASSWORD'),
            options=f"-c search_path={os.getenv('PG_SCHEMA', 'unble')}"
        )
        return conn
    except Exception as e:
        logger.error(f"Database connection failed: {e}")
        return None

def get_mock_data():
    """DB Ïó∞Í≤∞ Ïã§Ìå® Ïãú ÏÇ¨Ïö©Ìï† Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞"""
    now = datetime.now(KST)
    today_3am = now.replace(hour=3, minute=0, second=0, microsecond=0)
    
    # Ïò§Îäò ÏÉàÎ≤Ω 3ÏãúÏóê ÏûêÎèôÎ∞úÌñâÎêú Ìè¨Ïä§Ìä∏Îì§ ÏÉùÏÑ±
    posts = []
    
    # Ïò§Îäò ÏûêÎèôÎ∞úÌñâÎêú Ìè¨Ïä§Ìä∏Îì§ (ÏÉàÎ≤Ω 3Ïãú Ïù¥ÌõÑÎùºÎ©¥)
    if now >= today_3am:
        posts.extend([
            {
                'id': 1,
                'title': 'ü§ñ AI ÏΩîÎî© Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏Ïùò ÏµúÏã† ÎèôÌñ•',
                'site': 'unpre',
                'category': 'AI/ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç',
                'url': 'https://unpre.co.kr/ai-coding-assistant-2025',
                'created_at': today_3am.strftime('%Y-%m-%d %H:%M:%S'),
                'published': True
            },
            {
                'id': 2,
                'title': 'üìö Ìö®Ïú®Ï†ÅÏù∏ Ïñ∏Ïñ¥ÌïôÏäµÏùÑ ÏúÑÌïú 5Í∞ÄÏßÄ Î∞©Î≤ï',
                'site': 'untab',
                'category': 'ÍµêÏú°/Ïñ∏Ïñ¥ÌïôÏäµ',
                'url': 'https://untab.co.kr/language-learning-tips-2025',
                'created_at': today_3am.strftime('%Y-%m-%d %H:%M:%S'),
                'published': True
            },
            {
                'id': 3,
                'title': 'üèõÔ∏è Ï°∞ÏÑ†ÏãúÎåÄ Í≥ºÌïôÍ∏∞Ïà†Ïùò ÎÜÄÎùºÏö¥ Î∞úÏ†Ñ',
                'site': 'skewese',
                'category': 'Ïó≠ÏÇ¨/Î¨∏Ìôî',
                'url': 'https://skewese.com/joseon-science-technology',
                'created_at': today_3am.strftime('%Y-%m-%d %H:%M:%S'),
                'published': True
            }
        ])
    
    # Ïñ¥Ï†ú Î∞úÌñâÎêú Ìè¨Ïä§Ìä∏Îì§
    yesterday_3am = today_3am - timedelta(days=1)
    posts.extend([
        {
            'id': 4,
            'title': 'React 18Ïùò ÏÉàÎ°úÏö¥ Í∏∞Îä•Îì§',
            'site': 'unpre',
            'category': 'ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç',
            'url': 'https://unpre.co.kr/react-18-features',
            'created_at': yesterday_3am.strftime('%Y-%m-%d %H:%M:%S'),
            'published': True
        },
        {
            'id': 5,
            'title': 'Î∂ÄÎèôÏÇ∞ Ìà¨Ïûê Ï†ÑÎûµ Í∞ÄÏù¥Îìú',
            'site': 'untab',
            'category': 'Î∂ÄÎèôÏÇ∞',
            'url': 'https://untab.co.kr/real-estate-investment',
            'created_at': yesterday_3am.strftime('%Y-%m-%d %H:%M:%S'),
            'published': True
        }
    ])
    
    today_posts = len([p for p in posts if p['created_at'].startswith(now.strftime('%Y-%m-%d'))])
    
    return {
        'posts': posts,
        'stats': {
            'total_posts': len(posts),
            'published': len(posts),
            'scheduled': 0,
            'today_posts': today_posts
        }
    }

@app.route('/')
def dashboard():
    """Î©îÏù∏ ÎåÄÏãúÎ≥¥Îìú ÌéòÏù¥ÏßÄ"""
    response = make_response(render_template('dashboard.html'))
    response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate, max-age=0'
    response.headers['Pragma'] = 'no-cache'
    response.headers['Expires'] = '0'
    return response

@app.route('/api/recent_posts')
def get_recent_posts():
    """ÏµúÍ∑º Ìè¨Ïä§Ìä∏ Î™©Î°ù Ï°∞Ìöå"""
    try:
        conn = get_db_connection()
        if conn:
            cursor = conn.cursor(cursor_factory=RealDictCursor)
            
            # Í∞Å ÏÇ¨Ïù¥Ìä∏ÏóêÏÑú ÏµúÍ∑º Ìè¨Ïä§Ìä∏ Í∞ÄÏ†∏Ïò§Í∏∞
            posts = []
            for site in ['unpre', 'untab', 'skewese']:
                cursor.execute("""
                    SELECT id, title, site, 
                           CASE WHEN categories IS NOT NULL AND jsonb_array_length(categories) > 0 
                                THEN categories->>0 
                                ELSE 'default' END as category,
                           url, 
                           created_at::text, 
                           CASE WHEN status = 'published' THEN true ELSE false END as published
                    FROM content_files 
                    WHERE site = %s
                    ORDER BY created_at DESC 
                    LIMIT 5
                """, (site,))
                site_posts = cursor.fetchall()
                posts.extend(site_posts if site_posts else [])
            
            cursor.close()
            conn.close()
            
            # ÏãúÍ∞ÑÏàú Ï†ïÎ†¨
            posts.sort(key=lambda x: x.get('created_at', ''), reverse=True)
            return jsonify(posts[:20])
        else:
            mock = get_mock_data()
            return jsonify(mock['posts'])
    except Exception as e:
        logger.error(f"ÏµúÍ∑º Ìè¨Ïä§Ìä∏ Ï°∞Ìöå Ïò§Î•ò: {e}")
        mock = get_mock_data()
        return jsonify(mock['posts'])

@app.route('/api/posts')
def get_posts():
    """Î∞úÌñâÎêú Ìè¨Ïä§Ìä∏ Î™©Î°ù Ï°∞Ìöå"""
    try:
        conn = get_db_connection()
        if conn:
            cursor = conn.cursor(cursor_factory=RealDictCursor)
            site_filter = request.args.get('site', 'all')
            date_filter = request.args.get('date', '')
            
            posts = []
            for site in ['unpre', 'untab', 'skewese']:
                if site_filter == 'all' or site_filter == site:
                    query = """
                        SELECT id, title, site, 
                               CASE WHEN categories IS NOT NULL AND jsonb_array_length(categories) > 0 
                                    THEN categories->>0 
                                    ELSE 'default' END as category,
                               url, 
                               created_at::text, 
                               CASE WHEN status = 'published' THEN true ELSE false END as published
                        FROM content_files 
                        WHERE site = %s
                    """
                    params = [site]
                    
                    if date_filter:
                        query += " AND DATE(created_at) = %s"
                        params.append(date_filter)
                    
                    query += " ORDER BY created_at DESC LIMIT 10"
                    
                    cursor.execute(query, params)
                    site_posts = cursor.fetchall()
                    posts.extend(site_posts if site_posts else [])
            
            cursor.close()
            conn.close()
            
            posts.sort(key=lambda x: x.get('created_at', ''), reverse=True)
            return jsonify({'status': 'success', 'posts': posts})
        else:
            mock = get_mock_data()
            return jsonify({'status': 'success', 'posts': mock['posts']})
            
    except Exception as e:
        logger.error(f"Ìè¨Ïä§Ìä∏ Ï°∞Ìöå Ïò§Î•ò: {e}")
        mock = get_mock_data()
        return jsonify({'status': 'success', 'posts': mock['posts']})

@app.route('/api/stats')
def get_stats():
    """ÌÜµÍ≥Ñ Ï†ïÎ≥¥ Ï°∞Ìöå"""
    try:
        conn = get_db_connection()
        if conn:
            cursor = conn.cursor(cursor_factory=RealDictCursor)
            
            # Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ Ï°∞Ìöå
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_posts,
                    COUNT(CASE WHEN status = 'published' THEN 1 END) as published,
                    COUNT(CASE WHEN status != 'published' THEN 1 END) as scheduled,
                    COUNT(CASE WHEN DATE(created_at) = CURRENT_DATE THEN 1 END) as today_posts
                FROM content_files
            """)
            
            stats = cursor.fetchone()
            cursor.close()
            conn.close()
            
            if stats:
                stats['revenue'] = {
                    'total_views': 0,
                    'total_revenue': 0
                }
                return jsonify(stats)
            else:
                mock = get_mock_data()
                stats = mock['stats']
                stats['revenue'] = {
                    'total_views': 0,
                    'total_revenue': 0
                }
                return jsonify(stats)
        else:
            mock = get_mock_data()
            stats = mock['stats']
            stats['revenue'] = {
                'total_views': 0,
                'total_revenue': 0
            }
            return jsonify(stats)
        
    except Exception as e:
        logger.error(f"ÌÜµÍ≥Ñ Ï°∞Ìöå Ïò§Î•ò: {e}")
        mock = get_mock_data()
        stats = mock['stats']
        stats['revenue'] = {
            'total_views': 0,
            'total_revenue': 0
        }
        return jsonify(stats)

@app.route('/api/topic_stats')
def get_topic_stats():
    """Ï£ºÏ†ú ÌíÄ ÌÜµÍ≥Ñ Ï°∞Ìöå"""
    return jsonify({
        'unpre': {
            'total': 50,
            'used': 25,
            'available': 25
        },
        'untab': {
            'total': 50,
            'used': 20,
            'available': 30
        },
        'skewese': {
            'total': 50,
            'used': 15,
            'available': 35
        }
    })

@app.route('/api/system_status')
def get_system_status():
    """ÏãúÏä§ÌÖú ÏÉÅÌÉú Ï°∞Ìöå"""
    conn = get_db_connection()
    db_status = 'online' if conn else 'offline'
    if conn:
        conn.close()
    
    return jsonify({
        'api': {
            'openai': {'status': 'online', 'response_time': 150},
            'claude': {'status': 'online', 'response_time': 120},
            'pexels': {'status': 'online', 'response_time': 200}
        },
        'sites': {
            'unpre': {'status': 'online', 'last_post': datetime.now(KST).strftime('%Y-%m-%d')},
            'untab': {'status': 'online', 'last_post': datetime.now(KST).strftime('%Y-%m-%d')},
            'skewese': {'status': 'online', 'last_post': datetime.now(KST).strftime('%Y-%m-%d')}
        },
        'database': {'status': db_status},
        'scheduler': {'status': 'online', 'next_run': '03:00 KST'}
    })

@app.route('/trending')
def trending_page():
    """Ìä∏Î†åÎî© ÌéòÏù¥ÏßÄ"""
    return render_template('trending.html')

@app.route('/api/trending')
@app.route('/api/trending/<period>')
def get_trending(period='current'):
    """Ìä∏Î†åÎî© ÌÜ†ÌîΩ Ï°∞Ìöå"""
    try:
        # Î™©ÏóÖ Ìä∏Î†åÎî© Îç∞Ïù¥ÌÑ∞
        mock_trends = {
            'current': {
                'period': 'Ïù¥Î≤àÏ£º Ìä∏Î†åÎìú',
                'week_start': '2025-08-11',
                'cross_category_issues': [
                    {
                        'title': 'AI Í∏∞Ïà† ÌòÅÏã†',
                        'category': 'Technology',
                        'trend_type': 'hot',
                        'priority': 9,
                        'description': 'ChatGPTÏôÄ Claude Îì± AI Í∏∞Ïà†Ïù¥ Í∏âÏÜçÎèÑÎ°ú Î∞úÏ†ÑÌïòÍ≥† ÏûàÏäµÎãàÎã§.',
                        'keywords': ['AI', 'ChatGPT', 'Claude', 'Ïù∏Í≥µÏßÄÎä•']
                    },
                    {
                        'title': 'Î∂ÄÎèôÏÇ∞ Ï†ïÏ±Ö Î≥ÄÌôî',
                        'category': 'Real Estate',
                        'trend_type': 'rising',
                        'priority': 8,
                        'description': 'ÏÉàÎ°úÏö¥ Î∂ÄÎèôÏÇ∞ Ï†ïÏ±ÖÏù¥ Î∞úÌëúÎêòÏñ¥ ÏãúÏû•Ïóê ÌÅ∞ ÏòÅÌñ•ÏùÑ ÎØ∏ÏπòÍ≥† ÏûàÏäµÎãàÎã§.',
                        'keywords': ['Î∂ÄÎèôÏÇ∞', 'Ï†ïÏ±Ö', 'ÏãúÏû•Î≥ÄÌôî']
                    }
                ],
                'site_trends': {
                    'unpre': [
                        {
                            'title': 'React 18 ÏÉà Í∏∞Îä•',
                            'category': 'Frontend',
                            'trend_type': 'rising',
                            'priority': 7,
                            'description': 'React 18Ïùò ÏÉàÎ°úÏö¥ Í∏∞Îä•Îì§Ïù¥ Í∞úÎ∞úÏûêÎì§ ÏÇ¨Ïù¥ÏóêÏÑú ÌôîÏ†úÍ∞Ä ÎêòÍ≥† ÏûàÏäµÎãàÎã§.',
                            'keywords': ['React', 'Frontend', 'ÏõπÍ∞úÎ∞ú']
                        },
                        {
                            'title': 'Python ÏÑ±Îä• ÏµúÏ†ÅÌôî',
                            'category': 'Backend',
                            'trend_type': 'hot',
                            'priority': 8,
                            'description': 'Python ÏÑ±Îä• ÏµúÏ†ÅÌôî Í∏∞Î≤ïÎì§Ïù¥ Ï£ºÎ™©Î∞õÍ≥† ÏûàÏäµÎãàÎã§.',
                            'keywords': ['Python', 'ÏÑ±Îä•', 'ÏµúÏ†ÅÌôî']
                        }
                    ],
                    'untab': [
                        {
                            'title': 'Ïñ∏Ïñ¥ÌïôÏäµ Ïï± Ìä∏Î†åÎìú',
                            'category': 'Education',
                            'trend_type': 'rising',
                            'priority': 6,
                            'description': 'ÏÉàÎ°úÏö¥ Ïñ∏Ïñ¥ÌïôÏäµ Î∞©Î≤ïÎ°†Ïù¥ Ï£ºÎ™©Î∞õÍ≥† ÏûàÏäµÎãàÎã§.',
                            'keywords': ['Ïñ∏Ïñ¥ÌïôÏäµ', 'ÍµêÏú°', 'Ïï±']
                        }
                    ],
                    'skewese': [
                        {
                            'title': 'Ï°∞ÏÑ†ÏãúÎåÄ Î¨∏Ìôî Ïû¨Ï°∞Î™Ö',
                            'category': 'History',
                            'trend_type': 'predicted',
                            'priority': 5,
                            'description': 'Ï°∞ÏÑ†ÏãúÎåÄ Î¨∏ÌôîÏóê ÎåÄÌïú ÏÉàÎ°úÏö¥ Ïó∞Íµ¨ Í≤∞Í≥ºÍ∞Ä Î∞úÌëúÎêòÏóàÏäµÎãàÎã§.',
                            'keywords': ['Ï°∞ÏÑ†ÏãúÎåÄ', 'Ïó≠ÏÇ¨', 'Î¨∏Ìôî']
                        }
                    ]
                }
            }
        }
        
        trends = mock_trends.get(period, mock_trends['current'])
        
        return jsonify({
            'status': 'success',
            'success': True,
            'data': trends
        })
    except Exception as e:
        logger.error(f"Ìä∏Î†åÎî© Ï°∞Ìöå Ïò§Î•ò: {e}")
        return jsonify({
            'status': 'success',
            'success': True,
            'data': {
                'period': 'Í∏∞Î≥∏ Ìä∏Î†åÎìú',
                'cross_category_issues': [],
                'site_trends': {}
            }
        })

@app.route('/api/chart_data')
def get_chart_data():
    """Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå"""
    now = datetime.now(KST)
    daily_data = []
    site_data = {
        'unpre': 0,
        'untab': 0,
        'skewese': 0
    }
    
    try:
        conn = get_db_connection()
        if conn:
            cursor = conn.cursor(cursor_factory=RealDictCursor)
            
            for i in range(7):
                date = (now - timedelta(days=i)).strftime('%Y-%m-%d')
                
                cursor.execute("""
                    SELECT site, COUNT(*) as count
                    FROM content_files
                    WHERE DATE(created_at) = %s
                    GROUP BY site
                """, (date,))
                
                day_results = cursor.fetchall()
                day_count = sum(r['count'] for r in day_results) if day_results else 0
                daily_data.append({'date': date, 'count': day_count})
                
                for r in day_results:
                    site_data[r['site']] = site_data.get(r['site'], 0) + r['count']
            
            cursor.close()
            conn.close()
        else:
            # Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞
            for i in range(7):
                date = (now - timedelta(days=i)).strftime('%Y-%m-%d')
                daily_data.append({'date': date, 'count': 3 - i % 2})
            site_data = {'unpre': 7, 'untab': 5, 'skewese': 3}
    except Exception as e:
        logger.error(f"Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò: {e}")
        # Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞
        for i in range(7):
            date = (now - timedelta(days=i)).strftime('%Y-%m-%d')
            daily_data.append({'date': date, 'count': 3 - i % 2})
        site_data = {'unpre': 7, 'untab': 5, 'skewese': 3}
    
    return jsonify({
        'daily': daily_data,
        'bySite': site_data
    })

@app.route('/api/logs')
def get_logs():
    """ÏµúÍ∑º Î°úÍ∑∏ Ï°∞Ìöå"""
    logs = [
        {
            'time': datetime.now(KST).strftime('%H:%M:%S'),
            'level': 'info',
            'message': 'ÏãúÏä§ÌÖú Ï†ïÏÉÅ ÏûëÎèô Ï§ë'
        }
    ]
    return jsonify(logs)

@app.route('/api/schedule/weekly')
def get_weekly_schedule():
    """Ï£ºÍ∞Ñ Ïä§ÏºÄÏ§Ñ Ï°∞Ìöå"""
    week_start = request.args.get('week_start', datetime.now(KST).strftime('%Y-%m-%d'))
    
    # ÏÇ¨Ïù¥Ìä∏Î≥Ñ Ï£ºÏ†ú ÌíÄ (Îçî ÎßéÏùÄ Îã§ÏñëÏÑ±)
    topic_pools = {
        'unpre': [
            # ÌîÑÎ°†Ìä∏ÏóîÎìú Ï£ºÍ∞Ñ
            ['React 18 Ïã†Í∏∞Îä•', 'Next.js 13 App Router'],
            ['Vue.js 3 Composition API', 'Angular 16 Standalone'],
            ['TypeScript 5.0 ÌôúÏö©', 'JavaScript ES2024'],
            ['Webpack vs Vite', 'Î™®Îçò ÎπåÎìú ÎèÑÍµ¨'],
            ['CSS Grid vs Flexbox', 'Tailwind CSS Ïã§Ï†Ñ'],
            
            # Î∞±ÏóîÎìú Ï£ºÍ∞Ñ  
            ['Node.js ÏÑ±Îä• ÏµúÏ†ÅÌôî', 'Express vs Fastify'],
            ['Python FastAPI', 'Django 4.0 ÎπÑÎèôÍ∏∞'],
            ['PostgreSQL Í≥†Í∏â ÏøºÎ¶¨', 'MongoDB ÏßëÍ≥Ñ ÌååÏù¥ÌîÑÎùºÏù∏'],
            ['Redis Ï∫êÏã± Ï†ÑÎûµ', 'ElasticSearch Í≤ÄÏÉâ'],
            ['GraphQL vs REST API', 'gRPC ÎßàÏù¥ÌÅ¨Î°úÏÑúÎπÑÏä§'],
            
            # ÌÅ¥ÎùºÏö∞Îìú/DevOps Ï£ºÍ∞Ñ
            ['AWS Lambda ÏÑúÎ≤ÑÎ¶¨Ïä§', 'Docker Ïª®ÌÖåÏù¥ÎÑà ÏµúÏ†ÅÌôî'],
            ['Kubernetes Í∏∞Ï¥à', 'Terraform IaC'],
            ['GitHub Actions CI/CD', 'Jenkins vs GitLab CI'],
            ['Î™®ÎãàÌÑ∞ÎßÅ ÎèÑÍµ¨ ÎπÑÍµê', 'Prometheus & Grafana'],
            
            # AI/ML Ï£ºÍ∞Ñ
            ['ChatGPT API ÌôúÏö©', 'GitHub Copilot Ïã§Ï†Ñ'],
            ['TensorFlow vs PyTorch', 'LangChain Í∞úÎ∞ú'],
            ['OpenAI ÏûÑÎ≤†Îî©', 'Vector DB ÌôúÏö©'],
            ['AI ÏΩîÎìú Î¶¨Î∑∞', 'ÏûêÎèôÌôî ÌÖåÏä§Ìä∏ ÎèÑÍµ¨']
        ],
        'untab': [
            # Ïñ¥Ìïô Ï£ºÍ∞Ñ
            ['ÌÜ†Ïùµ 990Ï†ê Ï†ÑÎûµ', 'OPIc AL Îã¨ÏÑ±Î≤ï'],
            ['ÌÜ†Ìîå 110+ Í≥µÎûµ', 'IELTS 8.0 ÎπÑÎ≤ï'],
            ['ÏùºÎ≥∏Ïñ¥ JLPT N1', 'Ï§ëÍµ≠Ïñ¥ HSK 6Í∏â'],
            ['ÎèÖÏùºÏñ¥ TestDaF', 'Ïä§ÌéòÏù∏Ïñ¥ DELE'],
            ['ÌîÑÎûëÏä§Ïñ¥ DELF', 'Ïù¥ÌÉàÎ¶¨ÏïÑÏñ¥ CILS'],
            
            # IT ÏûêÍ≤©Ï¶ù Ï£ºÍ∞Ñ
            ['Ï†ïÎ≥¥Ï≤òÎ¶¨Í∏∞ÏÇ¨ Ïã§Í∏∞', 'SQLD Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑù'],
            ['AWS SAA ÏûêÍ≤©Ï¶ù', 'Azure Fundamentals'],
            ['Íµ¨Í∏Ä ÌÅ¥ÎùºÏö∞Îìú ACE', 'CISSP Î≥¥Ïïà'],
            ['PMP ÌîÑÎ°úÏ†ùÌä∏ Í¥ÄÎ¶¨', 'ITIL ÏÑúÎπÑÏä§ Í¥ÄÎ¶¨'],
            
            # Ìà¨Ïûê/Ïû¨ÌÖåÌÅ¨ Ï£ºÍ∞Ñ  
            ['Ï£ºÏãù Í∏∞Ïà†Î∂ÑÏÑù', 'Î∂ÄÎèôÏÇ∞ Í≤ΩÎß§ Ïã§Ï†Ñ'],
            ['ÏΩîÏù∏ Ìà¨Ïûê Í∞ÄÏù¥Îìú', 'ETF Ìè¨Ìä∏Ìè¥Î¶¨Ïò§'],
            ['P2P Ìà¨Ïûê Ï†ÑÎûµ', 'Ìï¥Ïô∏ Ï£ºÏãù Ìà¨Ïûê'],
            ['ÏÑ∏Í∏à Ï†àÏïΩ ÍøÄÌåÅ', 'Ïó∞Í∏à Ï†ÄÏ∂ï ÌôúÏö©'],
            
            # Î∂ÄÏóÖ/Ï∞ΩÏóÖ Ï£ºÍ∞Ñ
            ['Î∏îÎ°úÍ∑∏ ÏàòÏùµÌôî', 'Ïú†ÌäúÎ∏å Ï±ÑÎÑê Ïö¥ÏòÅ'],
            ['Ïò®ÎùºÏù∏ Í∞ïÏùò Ï†úÏûë', 'Ïù¥Ïª§Î®∏Ïä§ Ï∞ΩÏóÖ'],
            ['ÌîÑÎ¶¨ÎûúÏÑú ÎßàÏºÄÌåÖ', 'Í∞úÏù∏ Î∏åÎûúÎî©'],
            ['ÏÇ¨Ïù¥Îìú ÌîÑÎ°úÏ†ùÌä∏', 'Ïä§ÌÉÄÌä∏ÏóÖ Ï∞ΩÏóÖ']
        ],
        'skewese': [
            # ÌïúÍµ≠ÏÇ¨ Ï£ºÍ∞Ñ
            ['Ï°∞ÏÑ† Í≥ºÌïôÍ∏∞Ïà†ÏÇ¨', 'Í≥†Î†§ Î™ΩÍ≥® Ïπ®ÏûÖ'],
            ['ÏÇºÍµ≠ÌÜµÏùº Í≥ºÏ†ï', 'ÏùºÏ†úÍ∞ïÏ†êÍ∏∞ Ï†ÄÌï≠'],
            ['ÌïúÍµ≠Ï†ÑÏüÅ Ïû¨Ï°∞Î™Ö', 'Í∞úÌôîÍ∏∞ Í∑ºÎåÄÌôî'],
            ['Î∞±Ï†ú Î¨∏ÌôîÏú†ÏÇ∞', 'Ïã†Îùº Ìô©Í∏à Î¨∏Î™Ö'],
            
            # ÏÑ∏Í≥ÑÏÇ¨ Ï£ºÍ∞Ñ
            ['Î°úÎßàÏ†úÍµ≠ Ìù•ÎßùÏÇ¨', 'Ï§ëÍµ≠ 4ÎåÄ Î∞úÎ™ÖÌíà'],
            ['Ïù¥ÏßëÌä∏ ÌååÎùºÏò§', 'Î©îÏÜåÌè¨ÌÉÄÎØ∏ÏïÑ Î¨∏Î™Ö'],
            ['Î•¥ÎÑ§ÏÉÅÏä§ ÏòàÏà†Í∞Ä', 'ÌîÑÎûëÏä§ ÎåÄÌòÅÎ™Ö'],
            ['ÏÇ∞ÏóÖÌòÅÎ™Ö ÏòÅÌñ•', 'ÏïÑÎ©îÎ¶¨Ïπ¥ ÎåÄÎ∞úÍ≤¨'],
            
            # Ï≤†Ìïô/ÏÇ¨ÏÉÅ Ï£ºÍ∞Ñ
            ['Í≥µÏûê ÎÖºÏñ¥ Ìï¥ÏÑù', 'ÎÖ∏Ïûê ÎèÑÎçïÍ≤Ω'],
            ['ÌîåÎùºÌÜ§ Ïù¥Îç∞ÏïÑÎ°†', 'ÏïÑÎ¶¨Ïä§ÌÜ†ÌÖîÎ†àÏä§ Ïú§Î¶¨Ìïô'],
            ['Ïπ∏Ìä∏ ÏàúÏàòÏù¥ÏÑ±ÎπÑÌåê', 'ÎãàÏ≤¥ Í∂åÎ†•ÏùòÏßÄ'],
            ['Î∂àÍµê ÏÇ¨ÏÉÅ Ïù¥Ìï¥', 'Í∏∞ÎèÖÍµê Ïã†Ìïô'],
            
            # Î¨∏Ìôî/ÏòàÏà† Ï£ºÍ∞Ñ  
            ['Í≥†Íµ¨Î†§ Í≥†Î∂ÑÎ≤ΩÌôî', 'Î∞±Ï†ú Í∏àÎèôÎåÄÌñ•Î°ú'],
            ['Í≤ΩÎ≥µÍ∂Å Í±¥Ï∂ïÎØ∏', 'Î∂àÍµ≠ÏÇ¨ ÏÑùÍ∞ÄÌÉë'],
            ['Í≥†Î†§Ï≤≠Ïûê ÏòàÏà†', 'Ï°∞ÏÑ†Î∞±Ïûê ÏïÑÎ¶ÑÎã§ÏõÄ'],
            ['Ï†ÑÌÜµ ÌïúÎ≥µ Î≥ÄÏ≤úÏÇ¨', 'Í∂ÅÏ§ëÏùåÏãù Î¨∏Ìôî'],
            
            # ÌòÑÎåÄ Î¨∏Ìôî/ÎùºÏù¥ÌîÑ
            ['ÎØ∏ÎãàÎ©Ä ÎùºÏù¥ÌîÑ', 'Î∂ÅÏú†ÎüΩ ÌúòÍ≤å'],
            ['ÏùºÎ≥∏ ÏôÄÎπÑÏÇ¨ÎπÑ', 'Îç¥ÎßàÌÅ¨ ÎùºÍ≥∞'],
            ['Î™ÖÏÉÅÍ≥º ÎßàÏùåÏ±ôÍπÄ', 'ÎîîÏßÄÌÑ∏ ÎîîÌÜ°Ïä§'],
            ['Ï†úÎ°úÏõ®Ïù¥Ïä§Ìä∏', 'ÎπÑÍ±¥ ÎùºÏù¥ÌîÑÏä§ÌÉÄÏùº']
        ]
    }
    
    # Ï£ºÍ∞Ñ Ïä§ÏºÄÏ§Ñ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    schedule = {}
    start_date = datetime.strptime(week_start, '%Y-%m-%d')
    
    # Ï£ºÏ∞® Í≥ÑÏÇ∞ (ÎÖÑÎèÑ Í∏∞Ï§Ä Ï£ºÏ∞®)
    week_number = start_date.isocalendar()[1]
    
    for i in range(7):
        date = (start_date + timedelta(days=i)).strftime('%Y-%m-%d')
        day_of_week = (start_date + timedelta(days=i)).weekday()  # 0=ÏõîÏöîÏùº
        
        # Ï£ºÏ∞®ÏôÄ ÏöîÏùºÏùÑ Ï°∞Ìï©ÌïòÏó¨ Îã§ÏñëÌïú Ï£ºÏ†ú ÏÑ†ÌÉù
        # Í∞Å ÏÇ¨Ïù¥Ìä∏Î≥ÑÎ°ú Îã§Î•∏ Î°úÌÖåÏù¥ÏÖò Ìå®ÌÑ¥ Ï†ÅÏö©
        unpre_index = (week_number * 3 + day_of_week) % len(topic_pools['unpre'])
        untab_index = (week_number * 2 + day_of_week + 1) % len(topic_pools['untab'])  
        skewese_index = (week_number * 4 + day_of_week + 2) % len(topic_pools['skewese'])
        
        schedule[date] = {
            'unpre': {
                'time': '03:00',  # ÏÉàÎ≤Ω 3Ïãú ÏûêÎèôÎ∞úÌñâ
                'topics': topic_pools['unpre'][unpre_index],
                'status': 'scheduled'
            },
            'untab': {
                'time': '03:00',
                'topics': topic_pools['untab'][untab_index],
                'status': 'scheduled'
            },
            'skewese': {
                'time': '03:00',
                'topics': topic_pools['skewese'][skewese_index],
                'status': 'scheduled'
            }
        }
        
        # Í≥ºÍ±∞ ÎÇ†ÏßúÎäî Î∞úÌñâ ÏôÑÎ£åÎ°ú ÌëúÏãú
        current_date = datetime.now(KST).date()
        target_date = (start_date + timedelta(days=i)).date()
        
        if target_date < current_date:
            for site in schedule[date]:
                schedule[date][site]['status'] = 'published'
        elif target_date == current_date:
            # Ïò§ÎäòÏùÄ ÏÉàÎ≤Ω 3Ïãú Ïù¥ÌõÑÎ©¥ Î∞úÌñâ ÏôÑÎ£å
            current_time = datetime.now(KST).time()
            if current_time >= datetime.strptime('03:00', '%H:%M').time():
                for site in schedule[date]:
                    schedule[date][site]['status'] = 'published'
    
    return jsonify(schedule)

@app.route('/api/generate_wordpress', methods=['POST'])
def generate_wordpress():
    """WordPress ÏΩòÌÖêÏ∏† ÏÉùÏÑ±"""
    try:
        data = request.json
        site = data.get('site', 'unpre')
        topic = data.get('topic', 'ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç')
        
        database = get_database()
        
        try:
            if database.is_connected:
                # Claude APIÎ°ú Ïã§Ï†ú ÏΩòÌÖêÏ∏† ÏÉùÏÑ±
                logger.info(f"Content generator ÏÉÅÌÉú: {content_generator is not None}")
                if content_generator:
                    logger.info(f"Claude APIÎ°ú {topic} ÏΩòÌÖêÏ∏† ÏÉùÏÑ± ÏãúÏûë...")
                    
                    # ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï
                    site_config = {
                        'name': site,
                        'target_audience': 'Í∞úÎ∞úÏûê Î∞è IT Ï†ÑÎ¨∏Í∞Ä',
                        'content_style': 'Ïã§Ïö©Ï†ÅÏù¥Í≥† Í∏∞Ïà†Ï†ÅÏù∏',
                        'keywords_focus': data.get('keywords', [topic])
                    }
                    
                    # AI ÏΩòÌÖêÏ∏† ÏÉùÏÑ± (Ïã§Ï†ú Claude API Ìò∏Ï∂ú)
                    generated_content = content_generator.generate_content(
                        site_config=site_config,
                        topic=topic,
                        category=data.get('category', 'ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç'),
                        content_length='medium'
                    )
                    
                    # HTML ÌòïÌÉúÎ°ú Î≥ÄÌôò
                    content_html = f"""
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{generated_content['title']}</title>
    <meta name="description" content="{generated_content['meta_description']}">
</head>
<body>
    <article>
        <header>
            <h1>{generated_content['title']}</h1>
        </header>
        
        <section class="introduction">
            <p>{generated_content['introduction']}</p>
        </section>
        
        <main>
"""
                    
                    for section in generated_content['sections']:
                        content_html += f"""
            <section>
                <h2>{section['heading']}</h2>
                <div>{section['content'].replace('\n\n', '</p><p>').replace('\n', '<br>')}</div>
            </section>
"""
                    
                    content_html += f"""
        </main>
        
        <footer>
            <section class="conclusion">
                <h2>ÎßàÎ¨¥Î¶¨</h2>
                <p>{generated_content['conclusion']}</p>
            </section>
            
            <div class="tags">
                <strong>ÌÉúÍ∑∏:</strong> {', '.join(generated_content['tags'])}
            </div>
        </footer>
    </article>
</body>
</html>
"""
                    
                    content = content_html
                    title = generated_content['title']
                    logger.info(f"Claude API ÏΩòÌÖêÏ∏† ÏÉùÏÑ± ÏôÑÎ£å: {title[:50]}...")
                    
                else:
                    # Fallback ÏΩòÌÖêÏ∏†
                    logger.warning("ContentGeneratorÍ∞Ä NoneÏûÖÎãàÎã§. Í∏∞Î≥∏ ÏΩòÌÖêÏ∏†Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.")
                    content = f'<h1>{topic} ÏôÑÏ†Ñ Í∞ÄÏù¥Îìú</h1>\n<p>{topic}Ïóê ÎåÄÌïú ÏÉÅÏÑ∏Ìïú Î∂ÑÏÑùÏûÖÎãàÎã§.</p>'
                    title = f'{topic} ÏôÑÏ†Ñ Í∞ÄÏù¥Îìú'
                    logger.warning(f"Claude API ÎØ∏ÏÇ¨Ïö©, Í∏∞Î≥∏ ÏΩòÌÖêÏ∏† ÏÉùÏÑ±: {title}")
                
                # Ïã§Ï†ú ÌååÏùº Ï†ÄÏû•
                import tempfile
                import os
                
                temp_dir = tempfile.mkdtemp()
                file_name = f"{site}_{topic.replace(' ', '_')}_{int(__import__('time').time())}.html"
                file_path = os.path.join(temp_dir, file_name)
                
                # ÌååÏùº Ï†ÄÏû•
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                file_id = database.add_content_file(
                    site=site,
                    title=title,
                    file_path=file_path,
                    file_type='wordpress',
                    metadata={
                        'categories': [data.get('category', 'Í∏∞Î≥∏')],
                        'tags': data.get('keywords', [topic]),
                        'word_count': len(content.split()),
                        'reading_time': len(content.split()) // 200 + 1,
                        'file_size': len(content.encode('utf-8'))
                    }
                )
                
                # ÏÉùÏÑ± ÏÑ±Í≥µ ÏùëÎãµ
                return jsonify({
                    'success': True,
                    'message': f'{site} ÏÇ¨Ïù¥Ìä∏Ïóê {topic} Ï£ºÏ†úÎ°ú ÏΩòÌÖêÏ∏†Î•º ÏÉùÏÑ±ÌñàÏäµÎãàÎã§.',
                    'title': title,
                    'id': file_id,
                    'post': {
                        'id': file_id,
                        'title': title,
                        'site': site,
                        'status': 'draft'
                    }
                })
        except Exception as db_error:
            logger.error(f"DB Ï†ÄÏû• Ïã§Ìå®, Î™©ÏóÖ Î™®ÎìúÎ°ú Ï†ÑÌôò: {db_error}")
        
        # DB Ïó∞Í≤∞ Ïã§Ìå®Ïãú Î™©ÏóÖ ÏùëÎãµ
        import time
        current_time = int(time.time())
        
        new_file = {
            'title': f'{topic} ÏôÑÏ†Ñ Í∞ÄÏù¥Îìú',
            'id': current_time,
            'site': site,
            'status': 'draft',
            'created_at': time.strftime('%Y-%m-%d %H:%M:%S'),
        }
        
        return jsonify({
            'success': True,
            'message': f'{site} ÏÇ¨Ïù¥Ìä∏Ïóê {topic} Ï£ºÏ†úÎ°ú ÏΩòÌÖêÏ∏†Î•º ÏÉùÏÑ±ÌñàÏäµÎãàÎã§. (Î™©ÏóÖ Î™®Îìú)',
            'title': new_file['title'],
            'id': new_file['id'],
            'post': new_file
        })
        
    except Exception as e:
        logger.error(f"WordPress ÏΩòÌÖêÏ∏† ÏÉùÏÑ± Ïò§Î•ò: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/generate_tistory', methods=['POST'])
def generate_tistory():
    """Tistory ÏΩòÌÖêÏ∏† ÏÉùÏÑ±"""
    try:
        data = request.json
        topic = data.get('topic', 'ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç')
        
        database = get_database()
        
        try:
            if database.is_connected:
                # Claude APIÎ°ú Ïã§Ï†ú ÏΩòÌÖêÏ∏† ÏÉùÏÑ±
                logger.info(f"Tistory Content generator ÏÉÅÌÉú: {content_generator is not None}")
                if content_generator:
                    logger.info(f"Claude APIÎ°ú Tistory {topic} ÏΩòÌÖêÏ∏† ÏÉùÏÑ± ÏãúÏûë...")
                    
                    # ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï
                    site_config = {
                        'name': 'untab',
                        'target_audience': 'ÏùºÎ∞ò ÎåÄÏ§ë Î∞è Í¥ÄÏã¨ÏûàÎäî ÎèÖÏûê',
                        'content_style': 'Ïù¥Ìï¥ÌïòÍ∏∞ Ïâ¨Ïö∞Í≥† Ïã§Ïö©Ï†ÅÏù∏',
                        'keywords_focus': data.get('keywords', [topic])
                    }
                    
                    # AI ÏΩòÌÖêÏ∏† ÏÉùÏÑ± (Ïã§Ï†ú Claude API Ìò∏Ï∂ú)
                    generated_content = content_generator.generate_content(
                        site_config=site_config,
                        topic=topic,
                        category=data.get('category', 'ÏùºÎ∞ò'),
                        content_length='medium'
                    )
                    
                    # HTML ÌòïÌÉúÎ°ú Î≥ÄÌôò
                    content_html = f"""
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{generated_content['title']}</title>
    <meta name="description" content="{generated_content['meta_description']}">
</head>
<body>
    <article>
        <header>
            <h1>{generated_content['title']}</h1>
        </header>
        
        <section class="introduction">
            <p>{generated_content['introduction']}</p>
        </section>
        
        <main>
"""
                    
                    for section in generated_content['sections']:
                        content_html += f"""
            <section>
                <h2>{section['heading']}</h2>
                <div>{section['content'].replace('\n\n', '</p><p>').replace('\n', '<br>')}</div>
            </section>
"""
                    
                    content_html += f"""
        </main>
        
        <footer>
            <section class="conclusion">
                <h2>ÎßàÎ¨¥Î¶¨</h2>
                <p>{generated_content['conclusion']}</p>
            </section>
            
            <div class="tags">
                <strong>ÌÉúÍ∑∏:</strong> {', '.join(generated_content['tags'])}
            </div>
        </footer>
    </article>
</body>
</html>
"""
                    
                    content = content_html
                    title = generated_content['title']
                    logger.info(f"Claude API Tistory ÏΩòÌÖêÏ∏† ÏÉùÏÑ± ÏôÑÎ£å: {title[:50]}...")
                    
                else:
                    # Fallback ÏΩòÌÖêÏ∏†
                    logger.warning("Tistory ContentGeneratorÍ∞Ä NoneÏûÖÎãàÎã§. Í∏∞Î≥∏ ÏΩòÌÖêÏ∏†Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.")
                    content = f'<h1>{topic} Ïã¨Ìôî Î∂ÑÏÑù</h1>\n<p>{topic}Ïóê ÎåÄÌïú ÏÉÅÏÑ∏Ìïú Î∂ÑÏÑùÏûÖÎãàÎã§.</p>'
                    title = f'{topic} Ïã¨Ìôî Î∂ÑÏÑù'
                    logger.warning(f"Claude API ÎØ∏ÏÇ¨Ïö©, Tistory Í∏∞Î≥∏ ÏΩòÌÖêÏ∏† ÏÉùÏÑ±: {title}")
                
                # Ïã§Ï†ú ÌååÏùº Ï†ÄÏû•
                import tempfile
                import os
                
                temp_dir = tempfile.mkdtemp()
                file_name = f"tistory_{topic.replace(' ', '_')}_{int(__import__('time').time())}.html"
                file_path = os.path.join(temp_dir, file_name)
                
                # ÌååÏùº Ï†ÄÏû•
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                file_id = database.add_content_file(
                    site='untab',
                    title=title,
                    file_path=file_path,
                    file_type='tistory',
                    metadata={
                        'categories': [data.get('category', 'Í∏∞Î≥∏')],
                        'tags': data.get('keywords', [topic]),
                        'word_count': len(content.split()),
                        'reading_time': len(content.split()) // 200 + 1,
                        'file_size': len(content.encode('utf-8'))
                    }
                )
                
                # ÏÉùÏÑ± ÏÑ±Í≥µ ÏùëÎãµ
                return jsonify({
                    'success': True,
                    'message': f'TistoryÏóê {topic} Ï£ºÏ†úÎ°ú ÏΩòÌÖêÏ∏†Î•º ÏÉùÏÑ±ÌñàÏäµÎãàÎã§.',
                    'title': title,
                    'id': file_id,
                    'post': {
                        'id': file_id,
                        'title': title,
                        'status': 'draft'
                    }
                })
        except Exception as db_error:
            logger.error(f"DB Ï†ÄÏû• Ïã§Ìå®, Î™©ÏóÖ Î™®ÎìúÎ°ú Ï†ÑÌôò: {db_error}")
        
        # DB Ïó∞Í≤∞ Ïã§Ìå®Ïãú Î™©ÏóÖ ÏùëÎãµ
        import time
        current_time = int(time.time())
        
        new_file = {
            'title': f'{topic} Ïã¨Ìôî Î∂ÑÏÑù',
            'id': current_time,
            'status': 'draft',
            'created_at': time.strftime('%Y-%m-%d %H:%M:%S'),
        }
        
        return jsonify({
            'success': True,
            'message': f'TistoryÏóê {topic} Ï£ºÏ†úÎ°ú ÏΩòÌÖêÏ∏†Î•º ÏÉùÏÑ±ÌñàÏäµÎãàÎã§. (Î™©ÏóÖ Î™®Îìú)',
            'title': new_file['title'],
            'id': new_file['id'],
            'post': new_file
        })
        
    except Exception as e:
        logger.error(f"Tistory ÏΩòÌÖêÏ∏† ÏÉùÏÑ± Ïò§Î•ò: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/download_content/<int:file_id>')
def download_content(file_id):
    """ÏΩòÌÖêÏ∏† ÌååÏùº Îã§Ïö¥Î°úÎìú"""
    try:
        database = get_database()
        
        if database.is_connected:
            # DBÏóêÏÑú ÌååÏùº Ï†ïÎ≥¥ Ï°∞Ìöå
            files = database.get_content_files(limit=1000)  # Ï†ÑÏ≤¥ Ï°∞Ìöå
            target_file = None
            
            for f in files:
                if f.get('id') == file_id:
                    target_file = f
                    break
            
            if target_file:
                # Ïã§Ï†ú ÌååÏùº ÎÇ¥Ïö© ÏùΩÍ∏∞ ÏãúÎèÑ
                file_path = target_file.get('file_path')
                content = None
                
                if file_path and os.path.exists(file_path):
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                        logger.info(f"Ïã§Ï†ú ÌååÏùº ÏùΩÍ∏∞ ÏÑ±Í≥µ: {file_path}")
                    except Exception as e:
                        logger.warning(f"ÌååÏùº ÏùΩÍ∏∞ Ïã§Ìå®: {e}")
                        content = None
                else:
                    logger.warning(f"ÌååÏùº Í≤ΩÎ°úÍ∞Ä ÏóÜÍ±∞ÎÇò Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå: {file_path}")
                
                # ÌååÏùºÏù¥ ÏóÜÍ±∞ÎÇò ÏùΩÍ∏∞ Ïã§Ìå®Ïãú Í∏∞Î≥∏ ÏΩòÌÖêÏ∏† ÏÉùÏÑ±
                if not content:
                    content = f"""<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{target_file.get('title', 'Ï†úÎ™© ÏóÜÏùå')}</title>
    <style>
        body {{ font-family: 'Segoe UI', sans-serif; margin: 40px; line-height: 1.6; }}
        h1 {{ color: #333; border-bottom: 3px solid #007bff; padding-bottom: 10px; }}
        .meta {{ color: #666; margin-bottom: 20px; }}
        .content {{ margin-top: 30px; }}
    </style>
</head>
<body>
    <h1>{target_file.get('title', 'Ï†úÎ™© ÏóÜÏùå')}</h1>
    <div class="meta">
        <p><strong>ÏÇ¨Ïù¥Ìä∏:</strong> {target_file.get('site', 'N/A')}</p>
        <p><strong>ÏÉùÏÑ±Ïùº:</strong> {target_file.get('created_at', 'N/A')}</p>
        <p><strong>ÏÉÅÌÉú:</strong> {target_file.get('status', 'draft')}</p>
        <p><strong>Ïπ¥ÌÖåÍ≥†Î¶¨:</strong> {target_file.get('categories', ['Í∏∞Î≥∏'])[0] if target_file.get('categories') else 'Í∏∞Î≥∏'}</p>
    </div>
    <div class="content">
        <p>Ïù¥ ÏΩòÌÖêÏ∏†Îäî ÏûêÎèô ÏÉùÏÑ±Îêú {target_file.get('file_type', 'unknown')} ÏΩòÌÖêÏ∏†ÏûÖÎãàÎã§.</p>
        <p>ÏΩòÌÖêÏ∏† ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏñ¥ Í∏∞Î≥∏ ÎÇ¥Ïö©ÏùÑ ÌëúÏãúÌï©ÎãàÎã§.</p>
    </div>
</body>
</html>"""
                
                # ÌååÏùº Îã§Ïö¥Î°úÎìú ÏùëÎãµ
                response = make_response(content)
                # ÌïúÍ∏Ä ÌååÏùºÎ™Ö Ï≤òÎ¶¨
                safe_title = target_file.get('title', 'content')[:50]  # Í∏∏Ïù¥ Ï†úÌïú
                import re
                safe_title = re.sub(r'[^\w\s-]', '', safe_title).strip()
                filename = f"{safe_title}_{file_id}.html"
                
                response.headers['Content-Disposition'] = f'attachment; filename*=UTF-8\'\'{"".join(f"%{ord(c):02X}" if ord(c) > 127 else c for c in filename)}'
                response.headers['Content-Type'] = 'text/html; charset=utf-8'
                logger.info(f"Îã§Ïö¥Î°úÎìú Ï†úÍ≥µ: {filename}")
                return response
        
        # ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÎäî Í≤ΩÏö∞
        return jsonify({
            'success': False,
            'error': 'ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
        }), 404
        
    except Exception as e:
        logger.error(f"Îã§Ïö¥Î°úÎìú Ïò§Î•ò: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/debug/content_generator')
def debug_content_generator():
    """ContentGenerator ÏÉÅÌÉú ÎîîÎ≤ÑÍπÖ"""
    try:
        import os
        api_key = os.getenv("ANTHROPIC_API_KEY")
        return jsonify({
            'content_generator_initialized': content_generator is not None,
            'api_key_exists': api_key is not None,
            'api_key_length': len(api_key) if api_key else 0,
            'api_key_prefix': api_key[:20] if api_key else None,
            'error_info': str(getattr(content_generator, '_init_error', 'No error'))
        })
    except Exception as e:
        return jsonify({
            'error': str(e),
            'content_generator_initialized': False
        })

@app.route('/api/delete_posts', methods=['POST'])
def delete_posts():
    """Ìè¨Ïä§Ìä∏ ÏÇ≠Ï†ú"""
    try:
        data = request.json
        post_ids = data.get('post_ids', [])
        
        database = get_database()
        
        if database.is_connected and post_ids:
            # Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú ÏÇ≠Ï†ú
            deleted_count = 0
            for post_id in post_ids:
                try:
                    if database.delete_content_file(post_id):
                        deleted_count += 1
                except Exception as e:
                    logger.error(f"Ìè¨Ïä§Ìä∏ {post_id} ÏÇ≠Ï†ú Ïã§Ìå®: {e}")
            
            return jsonify({
                'success': True,
                'message': f'{deleted_count}Í∞úÏùò Ìè¨Ïä§Ìä∏Î•º ÏÇ≠Ï†úÌñàÏäµÎãàÎã§.',
                'deleted': deleted_count
            })
        
        # DB Ïó∞Í≤∞ Ïã§Ìå®Ïãú Î™©ÏóÖ ÏùëÎãµ
        return jsonify({
            'success': True,
            'message': f'{len(post_ids)}Í∞úÏùò Ìè¨Ïä§Ìä∏Î•º ÏÇ≠Ï†úÌñàÏäµÎãàÎã§. (Î™©ÏóÖ Î™®Îìú)',
            'deleted': post_ids
        })
        
    except Exception as e:
        logger.error(f"Ìè¨Ïä§Ìä∏ ÏÇ≠Ï†ú Ïò§Î•ò: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/schedule')
def get_schedule():
    """Î∞úÌñâ ÏùºÏ†ï Ï°∞Ìöå"""
    try:
        now = datetime.now(KST)
        schedule = []
        
        # Îã§Ïùå 7ÏùºÍ∞ÑÏùò ÏòàÏ†ï
        for i in range(7):
            date = (now + timedelta(days=i)).strftime('%Y-%m-%d')
            schedule.append({
                'date': date,
                'time': '03:00',
                'status': 'scheduled',
                'sites': ['unpre', 'untab', 'skewese']
            })
        
        return jsonify(schedule)
    except Exception as e:
        return jsonify([]), 500

@app.route('/api/wordpress_files')
def get_wordpress_files():
    """WordPress ÌååÏùº Î™©Î°ù"""
    try:
        database = get_database()
        if not database.is_connected:
            # DB Ïó∞Í≤∞ Ïã§Ìå®Ïãú Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ Î∞òÌôò
            return jsonify(get_mock_wordpress_files())
        
        # DBÏóêÏÑú WordPress ÏΩòÌÖêÏ∏† Ï°∞Ìöå
        files = database.get_content_files(file_type='wordpress', limit=50)
        
        # ÌòïÏãù ÎßûÏ∂îÍ∏∞
        formatted_files = []
        for f in files:
            # ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ (ÌïúÍµ≠ ÏãúÍ∞Ñ)
            created_at = f.get('created_at')
            if created_at:
                if isinstance(created_at, str):
                    # ISO ÌòïÏãù Î¨∏ÏûêÏó¥ÏùÑ datetimeÏúºÎ°ú Î≥ÄÌôò
                    from datetime import datetime
                    try:
                        dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        # UTCÎ•º ÌïúÍµ≠ ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôò
                        kst_dt = dt.astimezone(KST)
                        formatted_date = kst_dt.strftime('%Y-%m-%d %H:%M')
                    except:
                        formatted_date = created_at
                else:
                    formatted_date = created_at.strftime('%Y-%m-%d %H:%M') if hasattr(created_at, 'strftime') else str(created_at)
            else:
                formatted_date = datetime.now(KST).strftime('%Y-%m-%d %H:%M')
            
            formatted_files.append({
                'id': f.get('id'),
                'site': f.get('site', 'unpre'),
                'title': f.get('title'),
                'date': formatted_date,
                'size': f'{f.get("file_size", 0) / 1024:.1f}KB' if f.get('file_size') else '3.0KB',
                'status': f.get('status', 'draft'),
                'url': f.get('url'),
                'actions': ['view', 'publish', 'download', 'delete'] if f.get('status') == 'draft' else ['view', 'download', 'delete']
            })
        
        return jsonify(formatted_files)
    except Exception as e:
        logger.error(f"WordPress ÌååÏùº Î™©Î°ù Ï°∞Ìöå Ïò§Î•ò: {e}")
        # Ïò§Î•ò Î∞úÏÉùÏãú Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ Î∞òÌôò
        return jsonify(get_mock_wordpress_files())

def get_mock_wordpress_files():
    """Î™©ÏóÖ WordPress ÌååÏùº Îç∞Ïù¥ÌÑ∞"""
    now = datetime.now(KST)
    base_files = [
            {
                'id': 'wp_unpre_001',
                'site': 'unpre',
                'title': 'ü§ñ AI ÏΩîÎî© Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ ÌôúÏö© Í∞ÄÏù¥Îìú',
                'date': now.strftime('%Y-%m-%d %H:%M'),
                'size': '3.2KB',
                'status': 'published',
                'url': 'https://unpre.co.kr/ai-coding-assistant-guide',
                'actions': ['view', 'edit', 'download', 'delete']
            },
            {
                'id': 'wp_unpre_002',
                'site': 'unpre', 
                'title': '‚ö° React 18 Concurrent Features ÏôÑÏ†Ñ Ï†ïÎ≥µ',
                'date': (now - timedelta(hours=2)).strftime('%Y-%m-%d %H:%M'),
                'size': '4.1KB',
                'status': 'published',
                'url': 'https://unpre.co.kr/react-18-concurrent',
                'actions': ['view', 'edit', 'download', 'delete']
            },
            {
                'id': 'wp_untab_001',
                'site': 'untab',
                'title': 'üìö ÌÜ†Ïùµ 990Ï†ê Îã¨ÏÑ±ÌïòÎäî 5Í∞ÄÏßÄ ÎπÑÎ≤ï',
                'date': (now - timedelta(hours=1)).strftime('%Y-%m-%d %H:%M'),
                'size': '2.8KB',
                'status': 'published',
                'url': 'https://untab.co.kr/toeic-990-tips',
                'actions': ['view', 'edit', 'download', 'delete']
            },
            {
                'id': 'wp_untab_002',
                'site': 'untab',
                'title': 'üí∞ Î∂ÄÎèôÏÇ∞ Í≤ΩÎß§ Ï¥àÎ≥¥Ïûê ÏôÑÎ≤Ω Í∞ÄÏù¥Îìú',
                'date': (now - timedelta(hours=3)).strftime('%Y-%m-%d %H:%M'),
                'size': '3.5KB',
                'status': 'draft',
                'url': None,
                'actions': ['edit', 'publish', 'download', 'delete']
            },
            {
                'id': 'wp_skewese_001',
                'site': 'skewese',
                'title': 'üèõÔ∏è Ï°∞ÏÑ†ÏãúÎåÄ Í≥ºÌïôÍ∏∞Ïà†Ïùò Ïà®Í≤®ÏßÑ Ïù¥ÏïºÍ∏∞',
                'date': (now - timedelta(minutes=30)).strftime('%Y-%m-%d %H:%M'),
                'size': '3.7KB',
                'status': 'published',
                'url': 'https://skewese.com/joseon-science-stories',
                'actions': ['view', 'edit', 'download', 'delete']
            },
            {
                'id': 'wp_skewese_002',
                'site': 'skewese',
                'title': '‚ú® Í≥†Íµ¨Î†§ Í≥†Î∂ÑÎ≤ΩÌôî ÏÜç Ïö∞Ï£ºÍ¥Ä',
                'date': (now - timedelta(hours=4)).strftime('%Y-%m-%d %H:%M'),
                'size': '2.9KB',
                'status': 'draft',
                'url': None,
                'actions': ['edit', 'publish', 'download', 'delete']
            }
        ]
    return base_files

@app.route('/api/tistory_files')
def get_tistory_files():
    """Tistory ÌååÏùº Î™©Î°ù"""
    try:
        database = get_database()
        if not database.is_connected:
            # DB Ïó∞Í≤∞ Ïã§Ìå®Ïãú Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ Î∞òÌôò
            return jsonify(get_mock_tistory_files())
        
        # DBÏóêÏÑú Tistory ÏΩòÌÖêÏ∏† Ï°∞Ìöå
        files = database.get_content_files(file_type='tistory', limit=50)
        
        # ÌòïÏãù ÎßûÏ∂îÍ∏∞
        formatted_files = []
        for f in files:
            # ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ (ÌïúÍµ≠ ÏãúÍ∞Ñ)
            created_at = f.get('created_at')
            if created_at:
                if isinstance(created_at, str):
                    # ISO ÌòïÏãù Î¨∏ÏûêÏó¥ÏùÑ datetimeÏúºÎ°ú Î≥ÄÌôò
                    from datetime import datetime
                    try:
                        dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        # UTCÎ•º ÌïúÍµ≠ ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôò
                        kst_dt = dt.astimezone(KST)
                        formatted_date = kst_dt.strftime('%Y-%m-%d %H:%M')
                    except:
                        formatted_date = created_at
                else:
                    formatted_date = created_at.strftime('%Y-%m-%d %H:%M') if hasattr(created_at, 'strftime') else str(created_at)
            else:
                formatted_date = datetime.now(KST).strftime('%Y-%m-%d %H:%M')
            
            formatted_files.append({
                'id': f.get('id'),
                'title': f.get('title'),
                'date': formatted_date,
                'size': f'{f.get("file_size", 0) / 1024:.1f}KB' if f.get('file_size') else '3.0KB',
                'status': f.get('status', 'draft'),
                'url': f.get('url'),
                'actions': ['view', 'download', 'delete'],
                'category': f.get('categories', ['Í∏∞Î≥∏'])[0] if f.get('categories') else 'Í∏∞Î≥∏',
                'tags': f.get('tags', [])
            })
        
        return jsonify(formatted_files)
    except Exception as e:
        logger.error(f"Tistory ÌååÏùº Î™©Î°ù Ï°∞Ìöå Ïò§Î•ò: {e}")
        # Ïò§Î•ò Î∞úÏÉùÏãú Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ Î∞òÌôò
        return jsonify(get_mock_tistory_files())

def get_mock_tistory_files():
    """Î™©ÏóÖ Tistory ÌååÏùº Îç∞Ïù¥ÌÑ∞"""
    now = datetime.now(KST)
    base_files = [
            {
                'id': 'tistory_001',
                'title': 'üéØ 2025ÎÖÑ Ïñ∏Ïñ¥ÌïôÏäµ Ìä∏Î†åÎìúÏôÄ Ï†ÑÎßù',
                'date': now.strftime('%Y-%m-%d %H:%M'),
                'size': '2.7KB',
                'status': 'published',
                'url': 'https://untab.tistory.com/language-trends-2025',
                'actions': ['view', 'download', 'delete'],
                'category': 'Ïñ∏Ïñ¥ÌïôÏäµ',
                'tags': ['Ïñ∏Ïñ¥ÌïôÏäµ', 'Ìä∏Î†åÎìú', '2025ÎÖÑ']
            },
            {
                'id': 'tistory_002',
                'title': 'üí° Ìö®Í≥ºÏ†ÅÏù∏ Ïò®ÎùºÏù∏ Í∞ïÏùò Ï†úÏûë ÎÖ∏ÌïòÏö∞',
                'date': (now - timedelta(hours=1)).strftime('%Y-%m-%d %H:%M'),
                'size': '3.1KB',
                'status': 'published',
                'url': 'https://untab.tistory.com/online-course-creation',
                'actions': ['view', 'download', 'delete'],
                'category': 'ÍµêÏú°ÏΩòÌÖêÏ∏†',
                'tags': ['Ïò®ÎùºÏù∏Í∞ïÏùò', 'Ï†úÏûë', 'ÎÖ∏ÌïòÏö∞']
            },
            {
                'id': 'tistory_003',
                'title': 'üìà Ï£ºÏãù Ìà¨Ïûê Ï¥àÎ≥¥ÏûêÎ•º ÏúÑÌïú Í∏∞Î≥∏ Í∞ÄÏù¥Îìú',
                'date': (now - timedelta(hours=2)).strftime('%Y-%m-%d %H:%M'),
                'size': '4.2KB',
                'status': 'draft',
                'url': None,
                'actions': ['view', 'download', 'delete'],
                'category': 'Ìà¨Ïûê',
                'tags': ['Ï£ºÏãùÌà¨Ïûê', 'Ï¥àÎ≥¥Ïûê', 'Í∞ÄÏù¥Îìú']
            },
            {
                'id': 'tistory_004',
                'title': 'üèÜ AWS ÏûêÍ≤©Ï¶ù Ï∑®Îìù ÏôÑÎ≤Ω Î°úÎìúÎßµ',
                'date': (now - timedelta(hours=3)).strftime('%Y-%m-%d %H:%M'),
                'size': '3.8KB',
                'status': 'published',
                'url': 'https://untab.tistory.com/aws-certification-roadmap',
                'actions': ['view', 'download', 'delete'],
                'category': 'ITÏûêÍ≤©Ï¶ù',
                'tags': ['AWS', 'ÏûêÍ≤©Ï¶ù', 'Î°úÎìúÎßµ']
            },
            {
                'id': 'tistory_005',
                'title': 'üí∞ Î∂ÄÎèôÏÇ∞ Í≤ΩÎß§ Ìà¨Ïûê ÏãúÏûëÌïòÎäî Î≤ï',
                'date': (now - timedelta(hours=5)).strftime('%Y-%m-%d %H:%M'),
                'size': '3.5KB',
                'status': 'draft',
                'url': None,
                'actions': ['view', 'download', 'delete'],
                'category': 'Î∂ÄÎèôÏÇ∞',
                'tags': ['Î∂ÄÎèôÏÇ∞Í≤ΩÎß§', 'Ìà¨Ïûê', 'Ï¥àÎ≥¥Ïûê']
            }
        ]
    return base_files

@app.route('/api/system/time')
def get_system_time():
    """ÏãúÏä§ÌÖú ÏãúÍ∞Ñ Ï°∞Ìöå (ÌïúÍµ≠ ÏãúÍ∞ÑÍ≥º ÏÑúÎ≤Ñ ÏãúÍ∞Ñ ÎπÑÍµê)"""
    import time
    
    # ÏÑúÎ≤Ñ UTC ÏãúÍ∞Ñ
    utc_time = datetime.now(pytz.UTC)
    # ÌïúÍµ≠ ÏãúÍ∞Ñ
    kst_time = datetime.now(KST)
    # ÏÑúÎ≤Ñ Î°úÏª¨ ÏãúÍ∞Ñ (ÏãúÍ∞ÑÎåÄ ÏóÜÏù¥)
    server_local = datetime.now()
    
    # ÏãúÍ∞Ñ Ï∞®Ïù¥ Í≥ÑÏÇ∞
    time_diff = kst_time.hour - server_local.hour
    if time_diff < -12:
        time_diff += 24
    elif time_diff > 12:
        time_diff -= 24
    
    return jsonify({
        'status': 'success',
        'korea_time': kst_time.strftime('%Y-%m-%d %H:%M:%S KST'),
        'utc_time': utc_time.strftime('%Y-%m-%d %H:%M:%S UTC'),
        'server_local_time': server_local.strftime('%Y-%m-%d %H:%M:%S'),
        'timezone': 'Asia/Seoul',
        'time_difference_hours': time_diff,
        'scheduler_info': {
            'timezone': 'Asia/Seoul',
            'note': 'Ïä§ÏºÄÏ§ÑÎü¨Îäî ÌïúÍµ≠ ÏãúÍ∞Ñ(KST) Í∏∞Ï§ÄÏúºÎ°ú ÏûëÎèôÌï©ÎãàÎã§'
        }
    })

@app.route('/favicon.ico')
def favicon():
    """favicon Ï≤òÎ¶¨"""
    from flask import Response
    # Í∞ÑÎã®Ìïú Îπà favicon ÏùëÎãµ
    return Response('', status=204)

@app.route('/health')
def health():
    """Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏóîÎìúÌè¨Ïù∏Ìä∏"""
    return jsonify({
        'status': 'healthy',
        'message': 'Blog automation system is running',
        'time': datetime.now(KST).strftime('%Y-%m-%d %H:%M:%S KST')
    }), 200

@app.route('/api/status')
def api_status():
    """ÏãúÏä§ÌÖú ÏÉÅÌÉú API"""
    conn = get_db_connection()
    db_status = 'connected' if conn else 'disconnected'
    if conn:
        conn.close()
    
    return jsonify({
        'status': 'operational',
        'version': '1.0.0',
        'database': db_status,
        'features': {
            'content_generation': True,
            'wordpress_publishing': True,
            'tistory_publishing': True,
            'image_generation': True,
            'seo_optimization': True
        },
        'server_time': datetime.now(KST).strftime('%Y-%m-%d %H:%M:%S KST')
    }), 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    app.run(host="0.0.0.0", port=port, debug=False)